[["index.html", "Notes on and Solutions for Statistical Rethinking Chapter 1 Precis", " Notes on and Solutions for Statistical Rethinking Alexander Pastukhov 2020-11-16 Chapter 1 Precis This is a collection of solutions for exercises but also of notes that attempt to provide further details and intuition for some topics, such as information theory, information criteria, MCMC algorithms, etc. "],["small-worlds-and-large-worlds.html", "Chapter 2 Small Worlds and Large Worlds 2.1 Solutions to Exercises", " Chapter 2 Small Worlds and Large Worlds library(tidyverse) library(rethinking) 2.1 Solutions to Exercises 2E1 Which of the expressions below correspond to the statement: the probability of rain on Monday? Pr(rain) Pr(rain | Monday)  Pr(Monday | rain) Pr(rain, Monday) / Pr(Monday) 2E2 Which of the following statements corresponds to the expression: Pr(Monday|rain)? The probability of rain on Monday. The probability of rain, given that it is Monday. The probability that it is Monday, given that it is raining.  The probability that it is Monday and that it is raining. 2E3 Which of the expressions below correspond to the statement: the probability that it is Monday, given that it is raining? Pr ( Monday | rain )  Pr(rain | Monday) Pr(rain | Monday) Pr(Monday) Pr(rain | Monday) Pr(Monday) / Pr(rain) Pr(Monday | rain) Pr(rain) / Pr(Monday) 2E4 The Bayesian statistician Bruno de Finetti (1906 1985) began his 1973 book on probability theory with the declaration: PROBABILITY DOES NOT EXIST. The capitals appeared in the original, so I imagine de Finetti wanted us to shout this statement. What he meant is that probability is a device for describing uncertainty from the perspective of an observer with limited knowledge; it has no objective reality. Discuss the globe tossing example from the chapter, in light of this statement. What does it mean to say the probability of water is 0.7? He meant that, at least at macro level, there are no truly random events. At that scale, all events, such as motion of a globe throughout its flight, are described by deterministic laws of physics. Therefore, the outcome of globe tossing is deterministic and predictable if we have a complete knowledge about its initial momentum and about other forces at play (e.g., air movement). In most cases, we do not have the full knowledge and, therefore, our predictions are likely to diverge from the observed outcome and be mostly but not always correct. Hence, the concept of probability. At the end, noise is never truly random, noise is information that we did not include into our model explicitly. 2M1 Recall the globe tossing model from the chapter. Compute and plot the grid approximate posterior distribution for each of the following sets of observations. In each case, assume a uniform prior for p. #&#39; Computes posterior for water probability assuming binomial likelihood #&#39; #&#39; @param observations vector of &quot;W&quot; and &quot;L&quot; #&#39; @param prior numeric vector, its length determines grid resolution #&#39; #&#39; @return tibble with Pwater (from 0 to 1), Posterior (probability of water for given Pwater), and Prior #&#39; #&#39; @examples #&#39; probability_of_water(c(&quot;W&quot;, &quot;W&quot;, &quot;W&quot;), rep(1, 100)) probability_of_water &lt;- function(observations, prior){ p_grid &lt;- seq(from=0, to=1, length.out=length(prior)) likelihood &lt;- dbinom(sum(observations == &quot;W&quot;), size=length(observations), prob=p_grid) unstandardized_posterior &lt;- likelihood * prior tibble(Pwater = p_grid, Posterior = unstandardized_posterior / sum(unstandardized_posterior), Prior = prior) } 1. W, W, W posterior2M1 &lt;- probability_of_water(c(&quot;W&quot;, &quot;W&quot;, &quot;W&quot;), rep(1, 100)) ggplot(posterior2M1, aes(x=Pwater, y=Posterior)) + geom_line() 2. W, W, W, L posterior2M2 &lt;- probability_of_water(c(&quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;L&quot;), rep(1, 100)) ggplot(posterior2M2, aes(x=Pwater, y=Posterior)) + geom_line() 3. L, W, W, L, W, W, W posterior2M3 &lt;- probability_of_water(c(&quot;L&quot;, &quot;W&quot;, &quot;W&quot;, &quot;L&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;), rep(1, 100)) ggplot(posterior2M3, aes(x=Pwater, y=Posterior)) + geom_line() 2M2 Now assume a prior for p that is equal to zero when p&lt;0.5 and is a positive constant when p0.5. Again compute and plot the grid approximate posterior distribution for each of the sets of observations in the problem just above. p_grid &lt;- seq(from=0, to=1, length.out = 100) priorM2 &lt;- as.numeric(p_grid &gt;= 0.5) posterior2M3 &lt;- probability_of_water(c(&quot;L&quot;, &quot;W&quot;, &quot;W&quot;, &quot;L&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;), priorM2) ggplot(posterior2M3, aes(x=Pwater, y=Posterior)) + geom_line() 2M3 Suppose there are two globes, one for Earth and one for Mars. The Earth globe is 70% covered in water. The Mars globe is 100% land. Further suppose that one of these globes  you dont know which  was tossed in the air and produced a land observation. Assume that each globe was equally likely to be tossed. Show that the posterior probability that the globe was the Earth, conditional on seeing land (Pr ( Earth | land ) ), is 0.23. Bayes Formula tells us that \\[Pr(Planet | land) = \\frac{Pr(land | Planet) Pr(Planet)}{Pr(land)}\\] As \\(Pr(land)\\) is a normalization constant, we can ignore it for a moment. Accordingly, \\[uPr(Earth | land) = 0.3 \\cdot 0.5 = 0.15\\\\ uPr(Mars | land) = 1 \\cdot 0.5 = 0.5\\] where \\(uPr()\\) is unstandardized plausibility. Normalizing it, we get \\[Pr(Earth | land) = \\frac{0.15}{0.15 + 0.5} = 0.2308\\] 2M4 Suppose you have a deck with only three cards. Each card has two sides, and each side is either black or white. One card has two black sides. The second card has one black and one white side. The third card has two white sides. Now suppose all three cards are placed in a bag and shuffled. Someone reaches into the bag and pulls out a card and places it flat on a table. A black side is shown facing up, but you dont know the color of the side facing down. Show that the probability that the other side is also black is 2/3. Use the counting method (Section 2 of the chapter) to approach this problem. This means counting up the ways that each card could produce the observed data (a black side facing up on the table). B|B: B(1)  B(2) : 1 B|B: B(2)  B(1) : 1 B|W : B  W : 1 W|B : 0 W|W : 0 W|W : 0 There are three possible outcomes, given the visible side is black and two out of three lead to a black back side: \\(\\frac{2}{3}\\). 2M5 Now suppose there are four cards: B/B, B/W, W/W, and another B/B. Again suppose a card is drawn from the bag and a black side appears face up. Again calculate the probability that the other side is black. B|B: B(1)  B(2): 1 B|B: B(2)  B(1) : 1 B|W : B  W : 1 W|B : 0 W|W : 0 W|W : 0 B|B: B(3)  B(4): 1 B|B: B(4)  B(3) : 1 There are three possible outcomes, given the visible side is black and four out of five lead to a black back side: \\(\\frac{4}{5}\\) 2M6 Imagine that black ink is heavy, and so cards with black sides are heavier than cards with white sides. As a result, its less likely that a card with black sides is pulled from the bag. So again assume there are three cards: B/B, B/W, and W/W. After experimenting a number of times, you conclude that for every way to pull the B/B card from the bag, there are 2 ways to pull the B/W card and 3 ways to pull the W/W card. Again suppose that a card is pulled and a black side appears face up. Show that the probability the other side is black is now 0.5. Use the counting method, as before. B|B: B(1)  B(2): 1 × 1 (prior) = 1 B|B: B(2)  B(1) : 1 × 1 (prior) = 1 B|W : B  W : 1 × 2 (prior) = 2 W|B : 0 × 2 (prior) = 0 W|W : 0 × 3 (prior) = 0 W|W : 0 × 3 (prior) = 0 Now the counts are two out of four that other side is black, i.e. \\(0.5\\). 2M7 Assume again the original card problem, with a single card showing a black side face up. Before looking at the other side, we draw another card from the bag and lay it face up on the table. The face that is shown on the new card is white. Show that the probability that the first card, the one showing a black side, has black on its other side is now 0.75. Use the counting method, if you can. Hint: Treat this like the sequence of globe tosses, counting all the ways to see each observation, for each possible first card. Possible card sequences, bold means that back side of the first card is black: B(1)|B(2)  W|B : 1 B(2)|B(1)  W|B : 1 B(1)|B(2)  B|W : 0 B(2)|B(1)  B|W : 0 B(1)|B(2)  W(1)|W(2) : 1 B(2)|B(1)  W(1)|W(2) : 1 B(1)|B(2)  W(2)|W(1) : 1 B(2)|B(1)  W(2)|W(1) : 1 B|W  B(1)|B(2) : 0 W|B  B(1)|B(2) : 0 B|W  B(2)|B(1) : 0 W|B  B(2)|B(1) : 0 B|W  W(1)|W(2) : 1 W|B  W(1)|W(2) : 0 B|W  W(2)|W(1) : 1 W|B  W(2)|W(1) : 0 W(1)|W(2)  W|B : 0 W(2)|W(1)  W|B : 0 W(1)|W(2)  B|W : 0 W(2)|W(1)  B|W : 0 W(1)|W(2)  B(1)|B(2) : 0 W(2)|W(1)  B(1)|B(2) : 0 W(1)|W(2)  B(2)|B(1) : 0 W(2)|W(1)  B(2)|B(1) : 0 Total of eight possible path, six of them have black back for the first card: \\(0.75\\). 2H1 Suppose there are two species of panda bear. Both are equally common in the wild and live in the same places. They look exactly alike and eat the same food, and there is yet no genetic assay capable of telling them apart. They differ however in their family sizes. Species A gives birth to twins 10% of the time, otherwise birthing a single infant. Species B births twins 20% of the time, otherwise birthing singleton infants. Assume these numbers are known with certainty, from many years of field research. Now suppose you are managing a captive panda breeding program. You have a new female panda of unknown species, and she has just given birth to twins. What is the probability that her next birth will also be twins? \\[uPr(A | twins) = Pr(twins | A) * Pr(A) = 0.1 * 0.5 = 0.05 \\\\ uPr(B | twins) = Pr(twins | B) * Pr(B) = 0.2 * 0.5 = 0.1\\] After normalization \\(Pr(A | twins) = 1/3\\) and \\(Pr(B | twins) = 2/3\\). Probability that you will see twins again per species is \\[Pr(twins | A, twins) = Pr(A | twings) * Pr (twins | A) = 1 / 3 * 0.1 = 0.1 / 3 \\\\ Pr(twins | B, twins) = Pr(B | twings) * Pr (twins | B) = 2 / 3 * 0.2 = 0.4 / 3\\] The total probability is \\(\\frac{0.1}{3} + \\frac{0.4}{3} = \\frac{0.5}{3} \\approx 0.167\\) 2H2 Recall all the facts from the problem above. Now compute the probability that the panda we have is from species A, assuming we have observed only the first birth and that it was twins. \\[uPr(A | twins) = Pr(twins | A) * Pr(A) = 0.1 * 0.5 = 0.05 \\\\ uPr(B | twins) = Pr(twins | B) * Pr(B) = 0.2 * 0.5 = 0.1\\] After normalization \\(Pr(A | twins) = 1/3\\) 2H3 Continuing on from the previous problem, suppose the same panda mother has a second birth and that it is not twins, but a singleton infant. Compute the posterior probability that this panda is species A. \\[uPr(A | twins) = Pr(twins | A) * Pr(A) = 0.1 * 0.5 = 0.05 \\\\ uPr(B | twins) = Pr(twins | B) * Pr(B) = 0.2 * 0.5 = 0.1\\] After normalization \\(Pr(A | twins) = 1/3\\) and \\(Pr(B | twins) = 2/3\\). Given that next birth is a singleton: \\[uPr(A | twins, singleton) = Pr(A | twins) * (1 - Pr(twins|A)) = 1/3 \\cdot 0.9 = 0.9/3\\\\ uPr(B | twins, singleton) = Pr(B | twins) * (1 - Pr(twins|B)) = 2/3 \\cdot 0.8 = 1.6/3\\] After normalization \\(Pr(A | twins, singleton) = 0.36\\) (and \\(Pr(B | twins, singleton) = 0.64\\)). 2H4 A common boast of Bayesian statisticians is that Bayesian inference makes it easy to use all of the data, even if the data are of different types. So suppose now that a veterinarian comes along who has a new genetic test that she claims can identify the species of our mother panda. But the test, like all tests, is imperfect. This is the information you have about the test:  The probability it correctly identifies a species A panda is 0.8.  The probability it correctly identifies a species B panda is 0.65. The vet administers the test to your panda and tells you that the test is positive for species A. First ignore your previous information from the births and compute the posterior probability that your panda is species A. Then redo your calculation, now using the birth data as well. \\[uPr(A | test) = Pr(test | A) * Pr (A) = 0.8 * 0.5\\\\ uPr(B | test) = (1 - Pr(test | B)) * Pr (B) = (1 - 0.65) * 0.5 = 0.35 * 0.5\\] After normalization \\(Pr(A | test) \\approx 0.7\\) and \\(Pr(B | test) \\approx 0.3\\). Given the twins, this becomes \\[uPr(A | test, twins) = Pr(A | test) * Pr(twins | A) = 0.7 * 0.1 = 0.07\\\\ uPr(B | test, twins) = Pr(B | test) * Pr(twins | B) = 0.3 * 0.2 = 0.06\\] After normalization \\(Pr(A | test, twins) \\approx 0.533\\) and \\(Pr(B | test, twins) \\approx 0.467\\). Given the singleton, this becomes \\[uPr(A | test, twins, singleton) = Pr(A | test, twins) * (1 - Pr(twins | A)) = 0.533 * 0.9 = 0.48\\\\ uPr(B | test, twins, singleton) = Pr(B | test, twins) * (1 - Pr(twins | B)) = 0.467 * 0.8 = 0.3736\\] After normalization \\(Pr(A | test, twins, singleton) \\approx 0.5625\\) and \\(Pr(B | test, twins, singleton) \\approx 0.4375\\). "],["sampling-the-imaginary.html", "Chapter 3 Sampling the Imaginary 3.1 Solutions to Exercises", " Chapter 3 Sampling the Imaginary library(tidyverse) library(rethinking) 3.1 Solutions to Exercises 3.1.0.1 Initialization code for easy exercises p_grid &lt;- seq(from=0, to=1, length.out=1000) prior &lt;- rep(1,1000) likelihood &lt;- dbinom(6, size=9, prob=p_grid) posterior &lt;- likelihood * prior posterior &lt;- posterior / sum(posterior) set.seed(100) samples &lt;- sample(p_grid, prob=posterior, size=1e4, replace=TRUE) 3E1 How much posterior probability lies below p = 0.2? ggplot(data=NULL, aes(x=samples)) + geom_histogram(bins=50) + geom_vline(xintercept = 0.2, color=&quot;red&quot;) + labs(subtitle = glue::glue(&quot;p below 0.2: {mean(samples &lt; 0.2)}&quot;)) 3E2 How much posterior probability lies below p = 0.8? ggplot(data=NULL, aes(x=samples)) + geom_histogram(bins=50) + geom_vline(xintercept = 0.8, color=&quot;red&quot;) + labs(subtitle = glue::glue(&quot;p below 0.8: {mean(samples &lt; 0.8)}&quot;)) 3E3 How much posterior probability lies between p = 0.2 and p = 0.8? ggplot(data=NULL, aes(x=samples)) + geom_histogram(bins=50) + geom_vline(xintercept = c(0.2, 0.8), color=&quot;red&quot;) + labs(subtitle = glue::glue(&quot;p between 0.2 and 0.8: {mean(samples &lt; 0.8 &amp; samples &gt; 0.2)}&quot;)) 3E4 20% of the posterior probability lies below which value of p? q20 &lt;- quantile(samples, 0.2) ggplot(data=NULL, aes(x=samples)) + geom_histogram(bins=50) + geom_vline(xintercept = q20, color=&quot;red&quot;) + labs(subtitle = glue::glue(&quot;20% of the posterior probability lies below {round(q20, 2)}&quot;)) 3E5 20% of the posterior probability lies above which value of p? q80 &lt;- quantile(samples, 0.8) ggplot(data=NULL, aes(x=samples)) + geom_histogram(bins=50) + geom_vline(xintercept = q80, color=&quot;red&quot;) + labs(subtitle = glue::glue(&quot;20% of the posterior probability lies above {round(q80, 2)}&quot;)) 3E6 Which values of p contain the narrowest interval equal to 66% of the posterior probability? hpdi66 &lt;- HPDI(samples, 0.66) ggplot(data=NULL, aes(x=samples)) + geom_histogram(bins=50) + geom_vline(xintercept = hpdi66, color=&quot;red&quot;) + labs(subtitle = glue::glue(&quot;Narrowest interval equal to 66% of the posterior probability is {round(hpdi66[1], 3)}..{round(hpdi66[2], 3)}&quot;)) 3E7 Which values of p contain 66% of the posterior probability, assuming equal posterior probability both below and above the interval? pi66 &lt;- PI(samples, 0.66) ggplot(data=NULL, aes(x=samples)) + geom_histogram(bins=50) + geom_vline(xintercept = pi66, color=&quot;red&quot;) + labs(subtitle = glue::glue(&quot;66% of the posterior probability, assuming equal posterior probability are between {round(pi66[1], 3)}..{round(pi66[2], 3)}&quot;)) 3M1 Suppose the globe tossing data had turned out to be 8 water in 15 tosses. Construct the posterior distribution, using grid approximation. Use the same flat prior as before. p_grid &lt;- seq(from=0, to=1, length.out=1000) prior &lt;- rep(1,1000) likelihood &lt;- dbinom(8, size=15, prob=p_grid) posterior &lt;- likelihood * prior posterior &lt;- posterior / sum(posterior) ggplot(data=NULL, aes(x=p_grid, y=posterior)) + geom_line() + labs(subtitle=&quot;8 water in 15 tosses&quot;) 3M2 Draw 10,000 samples from the grid approximation from above. Then use the samples to calculate the 90% HPDI for p. set.seed(100) samples &lt;- sample(p_grid, prob=posterior, size=1e4, replace=TRUE) hpdi90 &lt;- HPDI(samples, 0.9) ggplot(data=NULL, aes(x=samples)) + geom_histogram(bins=50) + geom_vline(xintercept = hpdi90, color=&quot;red&quot;) + labs(subtitle = glue::glue(&quot;HPDI 90% is {round(hpdi66[1], 3)}..{round(hpdi66[2], 3)}&quot;)) 3M3 Construct a posterior predictive check for this model and data. This means simulate the distribution of samples, averaging over the posterior uncertainty in p . What is the probability of observing 8 water in 15 tosses? predicted_water8_15 &lt;- tibble(N = rbinom(length(samples), size=15, prob=samples)) %&gt;% group_by(N) %&gt;% summarize(count = n(), .groups = &#39;drop&#39;) %&gt;% ungroup() %&gt;% mutate(p = count / sum(count)) p8 &lt;- predicted_water8_15 %&gt;% filter(N == 8) %&gt;% pull(p) ggplot(predicted_water8_15, aes(x=N, y= p)) + geom_point() + labs(subtitle = glue::glue(&quot;The probability of observing 8 water in 15 tosses is {p8}&quot;)) #### 3M4 {-} Using the posterior distribution constructed from the new (8/15) data, now calculate the probability of observing 6 water in 9 tosses. predicted_water6_9 &lt;- tibble(N = rbinom(length(samples), size=9, prob=samples)) %&gt;% group_by(N) %&gt;% summarize(count = n(), .groups = &#39;drop&#39;) %&gt;% ungroup() %&gt;% mutate(p = count / sum(count)) p6 &lt;- predicted_water6_9 %&gt;% filter(N == 6) %&gt;% pull(p) ggplot(predicted_water6_9, aes(x=N, y= p)) + geom_point() + labs(subtitle = glue::glue(&quot;The probability of observing 6 water in 9 tosses is {p6}&quot;)) 3M5 Start over at 3M1 , but now use a prior that is zero below p = 0.5 and a constant above p = 0.5. This corresponds to prior information that a majority of the Earths surface is water. Repeat each problem above and compare the inferences. What difference does the better prior make? If it helps, compare inferences (using both priors) to the true value p = 0.7. p_grid &lt;- seq(from=0, to=1, length.out=1000) prior &lt;- as.numeric(p_grid &gt;= 0.5) likelihood &lt;- dbinom(8, size=15, prob=p_grid) posterior &lt;- likelihood * prior posterior &lt;- posterior / sum(posterior) ggplot(data=NULL, aes(x=p_grid, y=posterior)) + geom_line() + labs(subtitle=&quot;8 water in 15 tosses&quot;) set.seed(100) samples &lt;- sample(p_grid, prob=posterior, size=1e4, replace=TRUE) hpdi90 &lt;- HPDI(samples, 0.9) ggplot(data=NULL, aes(x=samples)) + geom_histogram(bins=50) + geom_vline(xintercept = hpdi90, color=&quot;red&quot;) + labs(title = &quot;Remake of 3M2&quot;, subtitle = glue::glue(&quot;HPDI 90% is {round(hpdi66[1], 3)}..{round(hpdi66[2], 3)}&quot;)) predicted_water8_15_remake &lt;- tibble(N = rbinom(length(samples), size=15, prob=samples)) %&gt;% group_by(N) %&gt;% summarize(count = n(), .groups = &#39;drop&#39;) %&gt;% ungroup() %&gt;% mutate(p = count / sum(count)) p8 &lt;- predicted_water8_15_remake %&gt;% filter(N == 8) %&gt;% pull(p) ggplot(predicted_water8_15_remake, aes(x=N, y= p)) + geom_point() + geom_line(data=predicted_water8_15, color=&quot;red&quot;) + labs(title = &quot;Remake of 3M3&quot;, subtitle = glue::glue(&quot;The probability of observing 8 water in 15 tosses is {p8}&quot;)) predicted_water6_9_remake &lt;- tibble(N = rbinom(length(samples), size=9, prob=samples)) %&gt;% group_by(N) %&gt;% summarize(count = n(), .groups = &#39;drop&#39;) %&gt;% ungroup() %&gt;% mutate(p = count / sum(count)) p6 &lt;- predicted_water6_9_remake %&gt;% filter(N == 6) %&gt;% pull(p) ggplot(predicted_water6_9_remake, aes(x=N, y= p)) + geom_point() + geom_line(data=predicted_water6_9, color=&quot;red&quot;) + labs(subtitle = glue::glue(&quot;The probability of observing 6 water in 9 tosses is {p6}&quot;)) 3M6 Suppose you want to estimate the Earths proportion of water very precisely. Specifically, you want the 99% percentile interval of the posterior distribution of p to be only 0.05 wide. This means the distance between the upper and lower bound of the interval should be 0.05. How many times will you have to toss the globe to do this? true_proportion &lt;- 0.5 toss_quantiles &lt;- tibble(tossesN = seq(10, 3000, by=1)) %&gt;% mutate(lowerN = qbinom(0.005, tossesN, true_proportion), upperN = qbinom(0.995, tossesN, true_proportion), lowerP = lowerN / tossesN, upperP = upperN / tossesN, deltaP = upperP - lowerP) minimal_N &lt;- toss_quantiles %&gt;% filter(deltaP &lt; 0.05) %&gt;% slice(1) %&gt;% pull(tossesN) ggplot(toss_quantiles, aes(x=tossesN, y=deltaP)) + geom_line() + geom_hline(yintercept = 0.05, color=&quot;red&quot;) + scale_y_log10() + labs(title = &quot;Via qbinom&quot;, subtitle = glue::glue(&quot;For proportion {true_proportion} you need {minimal_N} tosses to get 99% PI under 0.05&quot;)) simulate_and_compute_PI99 &lt;- function(tossN, true_proportion){ simulated_N &lt;- rbinom(1e4, tossN, true_proportion) simulated_P &lt;- simulated_N / tossN diff(rethinking::PI(simulated_P, prob=0.99)) } true_proportion &lt;- 0.5 toss_sims &lt;- tibble(tossesN = seq(10, 3000, by=1)) %&gt;% rowwise() %&gt;% mutate(deltaP =simulate_and_compute_PI99(tossesN, true_proportion)) minimal_N &lt;- toss_sims %&gt;% filter(deltaP &lt; 0.05) %&gt;% slice(1) %&gt;% pull(tossesN) ggplot(toss_sims, aes(x=tossesN, y=deltaP)) + geom_line() + geom_hline(yintercept = 0.05, color=&quot;red&quot;) + scale_y_log10() + labs(title = &quot;Via rbinom simulations&quot;, subtitle = glue::glue(&quot;For proportion {true_proportion} you need {minimal_N} tosses to get 99% PI under 0.05&quot;)) Hard data(homeworkch3) 3H1 Using grid approximation, compute the posterior distribution for the probability of a birth being a boy. Assume a uniform prior probability. Which parameter value maximizes the posterior probability? birth &lt;- c(birth1, birth2) birthN &lt;- length(birth) boyN &lt;- sum(birth) p_grid &lt;- seq(from=0, to=1, length.out=1000) prior &lt;- rep(1,1000) likelihood &lt;- dbinom(boyN, size=birthN, prob=p_grid) posterior &lt;- likelihood * prior posterior &lt;- posterior / sum(posterior) boyP &lt;- p_grid[which.max(posterior)] ggplot(data=NULL, aes(x=p_grid, y=posterior)) + geom_line()+ geom_vline(xintercept = boyP, color=&quot;red&quot;) + labs(subtitle = glue::glue(&quot;Mode: {round(boyP, 3)}&quot;)) 3H2 Using the sample function, draw 10,000 random parameter values from the posterior distribution you calculated above. Use these samples to estimate the 50%, 89%, and 97% highest posterior density intervals. set.seed(100) samples &lt;- sample(p_grid, prob=posterior, size=1e4, replace=TRUE) HPDI50 &lt;- rethinking::HPDI(samples, prob = 0.5) HPDI89 &lt;- rethinking::HPDI(samples, prob = 0.89) HPDI97 &lt;- rethinking::HPDI(samples, prob = 0.97) all_HPDI &lt;- c(HPDI50, HPDI89, HPDI97) names(all_HPDI) &lt;- NULL ggplot(data=NULL, aes(x=samples)) + geom_histogram(bins=40) + geom_vline(xintercept = HPDI50, color=&quot;green&quot;) + geom_vline(xintercept = HPDI89, color=&quot;blue&quot;) + geom_vline(xintercept = HPDI97, color=&quot;red&quot;) + scale_x_continuous(breaks = all_HPDI, labels = round(all_HPDI, 3)) 3H3 Use rbinom to simulate 10,000 replicates of 200 births. You should end up with 10,000 numbers, each one a count of boys out of 200 births. Compare the distribution of predicted numbers of boys to the actual count in the data (111 boys out of 200 births). There are many good ways to visualize the simulations, but the dens command (part of the rethinking package) is probably the easiest way in this case. Does it look like the model fits the data well? That is, does the distribution of predictions include the actual observation as a central, likely outcome? sim_boys &lt;- rbinom(1e4, 200, boyN / birthN) ggplot(data=NULL, aes(x=sim_boys)) + geom_density() + geom_vline(xintercept = boyN, color=&quot;red&quot;) 3H4 Now compare 10,000 counts of boys from 100 simulated first borns only to the number of boys in the first births, birth1. How does the model look in this light? sim_boys &lt;- rbinom(1e4, 100, boyN / birthN) ggplot(data=NULL, aes(x=sim_boys)) + geom_density() + geom_vline(xintercept = sum(birth1), color=&quot;red&quot;) 3H5 The model assumes that sex of first and second births are independent. To check this assumption, focus now on second births that followed female first borns. Compare 10,000 simulated counts of boys to only those second births that followed girls. To do this correctly, you need to count the number of first borns who were girls and simulate that many births, 10,000 times. Compare the counts of boys in your simulations to the actual observed count of boys following girls. How does the model look in this light? Any guesses what is going on in these data? birth_after_girl &lt;- birth2[birth1 == 0] sim_boys &lt;- rbinom(1e4, length(birth_after_girl), boyN / birthN) ggplot(data=NULL, aes(x=sim_boys)) + geom_density() + geom_vline(xintercept = sum(birth_after_girl), color=&quot;red&quot;) "]]
